Формулировка задания:

Переписать алгоритм KwsAgc с языка python на язык C/C++ c использованием низкоуровневых оптимизаций NEON.
Протестировать код на правильность работы, оценить ускорение относительно python-версии.

kws_agc.py  - сам файл
test_kwsAgc.py - тестирование алгоритма
test.sh  - запуск скрипта тестирования
requirements.txt - пакеты для питона
setup.sh - скрипт установки компонентов python3 и пакетов питона



# Изменения от оригинала
Мне пришлось немного отойти от изначальной версии скриптов
1. Изменил типы данных в kwsAgc.py, сделал их все жестко float32. Дело в том, что в зависимости от операндов numpy и питон преобразуют в выходной тип переменные по-разному. Это приводило к тому, что некоторые переменные (кажется, sigma_s_n и прочие) меняли тип с float64 на float32 и обратно постоянно на протяжении выполнения скрипта. Я решил же привести к одному типу и выбрал именно float32 по той причине, что в классе kwsAgcParams все параметры выбраны именно float32. 
2. В связи с первым изменением округления немного съехали и пришлось перегенерировать тестбенч-файлы, теперь добавился файл /data/agc_test_float.res.raw
3. Добавил аргумент входа -r repeats, который применяется перед kwsAgc.Call(), чтобы прогнать N раз алгоритмический кусок
4. Добавил счетчик времени (на самом простом time.time()). Теперь при выполнении test.sh там передается и аргумент количества итераций, а в конце выполнения печатается также занятое время.


Сейчас на 100 повторений занимает примерно 2.4 сек
